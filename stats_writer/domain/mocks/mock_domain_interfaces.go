// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package test is a generated GoMock package.
package test

import (
	x "."
	context "context"
	gomock "github.com/CrowdStrike/gomock/gomock"
	reflect "reflect"
	time "time"
)

// MockCassandraRepository is a mock of CassandraRepository interface
type MockCassandraRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCassandraRepositoryMockRecorder
}

// MockCassandraRepositoryMockRecorder is the mock recorder for MockCassandraRepository
type MockCassandraRepositoryMockRecorder struct {
	mock *MockCassandraRepository
}

// NewMockCassandraRepository creates a new mock instance
func NewMockCassandraRepository(ctrl *gomock.Controller) *MockCassandraRepository {
	mock := &MockCassandraRepository{ctrl: ctrl}
	mock.recorder = &MockCassandraRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCassandraRepository) EXPECT() *MockCassandraRepositoryMockRecorder {
	return m.recorder
}

// InsertHostStats mocks base method
func (m *MockCassandraRepository) InsertHostStats(ctx context.Context, sensorID string, reportedTime time.Time, stats ...*x.HostStats) error {
	varargs := []interface{}{ctx, sensorID, reportedTime}
	for _, a := range stats {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertHostStats", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHostStats indicates an expected call of InsertHostStats
func (mr *MockCassandraRepositoryMockRecorder) InsertHostStats(ctx, sensorID, reportedTime interface{}, stats ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, sensorID, reportedTime}, stats...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHostStats", reflect.TypeOf((*MockCassandraRepository)(nil).InsertHostStats), varargs...)
}

// MockSensor is a mock of Sensor interface
type MockSensor struct {
	ctrl     *gomock.Controller
	recorder *MockSensorMockRecorder
}

// MockSensorMockRecorder is the mock recorder for MockSensor
type MockSensorMockRecorder struct {
	mock *MockSensor
}

// NewMockSensor creates a new mock instance
func NewMockSensor(ctrl *gomock.Controller) *MockSensor {
	mock := &MockSensor{ctrl: ctrl}
	mock.recorder = &MockSensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSensor) EXPECT() *MockSensorMockRecorder {
	return m.recorder
}

// Stop mocks base method
func (m *MockSensor) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockSensorMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSensor)(nil).Stop))
}

// ScrapeStats mocks base method
func (m *MockSensor) ScrapeStats() {
	m.ctrl.Call(m, "ScrapeStats")
}

// ScrapeStats indicates an expected call of ScrapeStats
func (mr *MockSensorMockRecorder) ScrapeStats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeStats", reflect.TypeOf((*MockSensor)(nil).ScrapeStats))
}

// MockStatsProducer is a mock of StatsProducer interface
type MockStatsProducer struct {
	ctrl     *gomock.Controller
	recorder *MockStatsProducerMockRecorder
}

// MockStatsProducerMockRecorder is the mock recorder for MockStatsProducer
type MockStatsProducerMockRecorder struct {
	mock *MockStatsProducer
}

// NewMockStatsProducer creates a new mock instance
func NewMockStatsProducer(ctrl *gomock.Controller) *MockStatsProducer {
	mock := &MockStatsProducer{ctrl: ctrl}
	mock.recorder = &MockStatsProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatsProducer) EXPECT() *MockStatsProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method
func (m *MockStatsProducer) Produce(msg x.HostStats) {
	m.ctrl.Call(m, "Produce", msg)
}

// Produce indicates an expected call of Produce
func (mr *MockStatsProducerMockRecorder) Produce(msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockStatsProducer)(nil).Produce), msg)
}

// MockStatsConsumer is a mock of StatsConsumer interface
type MockStatsConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockStatsConsumerMockRecorder
}

// MockStatsConsumerMockRecorder is the mock recorder for MockStatsConsumer
type MockStatsConsumerMockRecorder struct {
	mock *MockStatsConsumer
}

// NewMockStatsConsumer creates a new mock instance
func NewMockStatsConsumer(ctrl *gomock.Controller) *MockStatsConsumer {
	mock := &MockStatsConsumer{ctrl: ctrl}
	mock.recorder = &MockStatsConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatsConsumer) EXPECT() *MockStatsConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method
func (m *MockStatsConsumer) Consume() (x.HostStats, bool) {
	ret := m.ctrl.Call(m, "Consume")
	ret0, _ := ret[0].(x.HostStats)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockStatsConsumerMockRecorder) Consume() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockStatsConsumer)(nil).Consume))
}
